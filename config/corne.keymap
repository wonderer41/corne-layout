/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    macros {
        alt_tab_short_hold: alt_tab_short_hold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_wait_time 2000>,
                <&macro_release>,
                <&kp LEFT_ALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &lt 2 Q  &kp W    &kp E           &kp R             &kp T        &kp Y          &kp U      &kp I             &kp O    &kp P          &trans
&trans  &kp A    &kp S    &kp D           &kp F             &kp G        &kp H          &kp J      &kp K             &kp L    &kp SEMICOLON  &trans
&trans  &lt 1 Z  &lt 3 X  &kp C           &kp V             &kp B        &kp N          &kp M      &kp COMMA         &kp DOT  &kp SLASH      &trans
                          &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp SPACE    &kp BACKSPACE  &kp ENTER  &mt LEFT_ALT TAB
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp NUMBER_0  &kp N7          &kp N8            &kp N9          &kp GRAVE             &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET   &kp DELETE  &trans
&trans  &trans  &kp EQUAL     &kp NUMBER_4    &kp NUMBER_5      &kp NUMBER_6    &kp UP_ARROW          &kp LEFT_ARROW   &kp DOWN_ARROW         &kp RIGHT_ARROW    &kp SQT     &trans
&trans  &trans  &kp PLUS      &kp NUMBER_1    &kp NUMBER_2      &kp NUMBER_3    &kp NON_US_BACKSLASH  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp MINUS   &trans
                              &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp SPACE       &kp BACKSPACE         &kp ENTER        &mt LEFT_ALT TAB
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp F10  &kp F7          &kp F8            &kp F9       &kp LC(F)      &kp LC(LS(UP_ARROW))    &kp LS(UP_ARROW)    &kp LA(UP_ARROW)  &kp LC(LA(DEL))  &trans
&trans  &trans  &kp F11  &kp F4          &kp F5            &kp F6       &kp LEFT_ALT   &kp LEFT_GUI            &kp CAPSLOCK        &kp ESCAPE        &kp DEL          &trans
&trans  &trans  &kp F12  &kp F1          &kp F2            &kp F3       &kp LC(D)      &kp LC(LS(DOWN_ARROW))  &kp LS(DOWN_ARROW)  &kp LA(DOWN)      &kp LC(LS(P))    &trans
                         &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp SPACE    &kp BACKSPACE  &kp ENTER               &mt LEFT_ALT TAB
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &bt BT_CLR      &bt BT_CLR_ALL    &bt BT_NXT       &mkp LCLK      &kp LC(C)       &msc SCRL_UP      &trans           &trans  &trans
&trans  &trans  &trans  &bt BT_SEL 2    &bt BT_SEL 1      &bt BT_SEL 0     &mmv MOVE_UP   &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &bt BT_DISC 2   &bt BT_DISC 1     &bt BT_DISC 0    &mkp RCLK      &kp LC(V)       &msc SCRL_DOWN    &trans           &trans  &trans
                        &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp SPACE        &kp BACKSPACE  &kp ENTER       &mt LEFT_ALT TAB
            >;
        };
    };
};
